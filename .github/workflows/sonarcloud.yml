name: CI/CD Pipeline - Build, Test, SonarQube, Docker, Nexus

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  # build-test:
  #   name: Build and Test
  #   runs-on: self-hosted

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Set up JDK 17
  #       uses: actions/setup-java@v4
  #       with:
  #         distribution: temurin
  #         java-version: 17

  #     - name: Cache Maven packages
  #       uses: actions/cache@v4
  #       with:
  #         path: ~/.m2/repository
  #         key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
  #         restore-keys: ${{ runner.os }}-maven-

  #     - name: Build and run unit tests
  #       shell: cmd
  #       run: |
  #         cd GestionUser && mvn clean test

  # sonarqube-analysis:
  #   name: SonarQube Analysis
  #   runs-on: self-hosted
  #   needs: build-test

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Set up JDK 17
  #       uses: actions/setup-java@v4
  #       with:
  #         distribution: temurin
  #         java-version: 17

  #     - name: Cache Maven packages
  #       uses: actions/cache@v4
  #       with:
  #         path: ~/.m2/repository
  #         key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
  #         restore-keys: ${{ runner.os }}-maven-

  #     - name: SonarQube Scan
  #       shell: cmd
  #       run: |
  #         cd GestionUser && mvn verify sonar:sonar -Dsonar.projectKey=ahmedzmerli_PFE_3.2.5 -Dsonar.organization=ahmedzmerli -Dsonar.host.url=https://sonarcloud.io -Dsonar.token=${{ secrets.SONAR_TOKEN }}

  docker-build-push-run:
    name: Docker Build, Push, and Compose Up
    runs-on: self-hosted
    # needs: sonarqube-analysis

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install Docker Compose
        shell: cmd
        run: |
          curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-windows-x86_64.exe" -o C:\Windows\System32\docker-compose.exe
          docker-compose --version

      - name: Build and tag backend image
        shell: cmd
        run: docker build -t ahmedzmerli/spring ./GestionUser

      - name: Build and tag frontend image
        shell: cmd
        run: docker build -t ahmedzmerli/angular ./GestionUserDIM2

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push backend image to Docker Hub
        shell: cmd
        run: docker push ahmedzmerli/spring

      - name: Push frontend image to Docker Hub
        shell: cmd
        run: docker push ahmedzmerli/angular

      - name: Start Docker Compose
        shell: cmd
        run: |
          docker-compose -f docker-compose.yml up -d
          timeout /t 30
          docker-compose logs

      - name: Check MySQL connectivity
        shell: cmd
        run: |
          docker exec springboot ping -n 3 mysql
          docker exec springboot cmd /c "nc -zv mysql 3306"

      - name: Wait for MySQL to be healthy
        shell: cmd
        run: |
          echo "Waiting for MySQL to be healthy..."
          for /L %%i in (1,1,30) do (
            for /f "tokens=*" %%s in ('docker inspect --format="{{.State.Health.Status}}" mysql') do set status=%%s
            echo Current MySQL health: !status!
            if "!status!"=="healthy" (
              echo ✅ MySQL is healthy!
              exit /b 0
            )
            ping -n 6 127.0.0.1 >nul
          )
          echo ❌ MySQL did not become healthy in time.
          docker logs mysql
          exit /b 1
