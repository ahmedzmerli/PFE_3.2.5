name: CI/CD Pipeline - Build, Test, SonarQube and Docker

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build-test:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Build and run unit tests
        run: |
          cd GestionUser
          mvn clean test

  sonarqube-analysis:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: build-test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: SonarQube Scan
        run: |
          cd GestionUser
          mvn verify sonar:sonar \
            -Dsonar.projectKey=ahmedzmerli_PFE_3.2.5 \
            -Dsonar.organization=ahmedzmerli \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

  docker-build-push-run:
    name: Docker Build, Push, and Compose Up
    runs-on: ubuntu-latest
    needs: sonarqube-analysis

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and tag backend image
        run: |
          docker build -t ahmedzmerli/spring ./GestionUser

      - name: Build and tag frontend image
        run: |
          docker build -t ahmedzmerli/angular ./GestionUserDIM2

      - name: Push backend image to Docker Hub
        run: docker push ahmedzmerli/spring

      - name: Push frontend image to Docker Hub
        run: docker push ahmedzmerli/angular

      - name: Run docker-compose services
        run: docker compose -f docker-compose.yml up -d

  scan-vulnerabilities:
    runs-on: ubuntu-latest
    needs: docker-build-push-run
    steps:
      - name: Scan backend image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ahmedzmerli/spring:latest
        continue-on-error: true

      - name: Scan frontend image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ahmedzmerli/angular:latest
        continue-on-error: true
