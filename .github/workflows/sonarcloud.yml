name: CI/CD Pipeline - Build, Test, SonarQube, Docker, Nexus

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  # build-test:
  #   name: Build and Test
  #   runs-on: self-hosted

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Set up JDK 17
  #       uses: actions/setup-java@v4
  #       with:
  #         distribution: temurin
  #         java-version: 17

  #     - name: Cache Maven packages
  #       uses: actions/cache@v4
  #       with:
  #         path: ~/.m2/repository
  #         key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
  #         restore-keys: ${{ runner.os }}-maven-

  #     - name: Build and run unit tests
  #       shell: cmd
  #       run: |
  #         cd GestionUser && mvn clean test
  # sonarqube-analysis:
  #   name: SonarQube Analysis
  #   runs-on: self-hosted
  #   needs: build-test

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Set up JDK 17
  #       uses: actions/setup-java@v4
  #       with:
  #         distribution: temurin
  #         java-version: 17

  #     - name: Cache Maven packages
  #       uses: actions/cache@v4
  #       with:
  #         path: ~/.m2/repository
  #         key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
  #         restore-keys: ${{ runner.os }}-maven-

  #     - name: SonarQube Scan
  #       shell: cmd
  #       run: |
  #         cd GestionUser && mvn verify sonar:sonar -Dsonar.projectKey=ahmedzmerli_PFE_3.2.5 -Dsonar.organization=ahmedzmerli -Dsonar.host.url=https://sonarcloud.io -Dsonar.token=${{ secrets.SONAR_TOKEN }}


 docker-build-push-run:
  name: Docker Build, Push, and Compose Up
  runs-on: self-hosted

  steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # Build images
    - name: Build backend image
      shell: powershell
      run: |
        docker build -t ahmedzmerli/spring ./GestionUser

    - name: Build frontend image
      shell: powershell
      run: |
        docker build -t ahmedzmerli/angular ./GestionUserDIM2

    # Login Docker Hub
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USER }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Push images
    - name: Push backend image
      shell: powershell
      run: docker push ahmedzmerli/spring

    - name: Push frontend image
      shell: powershell
      run: docker push ahmedzmerli/angular

    # Clean previous stack (ignore errors, PowerShell style)
    - name: Reset previous stack
      shell: powershell
      run: |
        docker compose -f docker-compose.yml down -v --remove-orphans
        if ($LASTEXITCODE -ne 0) { Write-Host "Ignoring error from compose down"; $global:LASTEXITCODE = 0 }
        docker system prune -f
        if ($LASTEXITCODE -ne 0) { Write-Host "Ignoring error from system prune"; $global:LASTEXITCODE = 0 }

    # Launch docker-compose
    - name: Run Docker Compose
      shell: powershell
      run: |
        echo "üöÄ Lancement de docker compose..."
        docker compose -f docker-compose.yml up -d --build
        echo "‚è≥ Pause de 60 secondes pour stabilisation (MySQL, Backend, etc.)..."
        Start-Sleep -Seconds 60

    # Show running containers
    - name: Check running containers
      shell: powershell
      run: docker compose -f docker-compose.yml ps

    # Logs MySQL
    - name: Logs - MySQL
      shell: powershell
      continue-on-error: true
      run: |
        echo "üìù Logs MySQL :"
        docker compose -f docker-compose.yml logs mysql --tail=100

    # Logs Backend (service = springboot)
    - name: Logs - Backend
      shell: powershell
      continue-on-error: true
      run: |
        echo "üìù Logs Spring Boot :"
        docker compose -f docker-compose.yml logs springboot --tail=100

    # Logs Frontend (service = angular)
    - name: Logs - Frontend
      shell: powershell
      continue-on-error: true
      run: |
        echo "üìù Logs Frontend :"
        docker compose -f docker-compose.yml logs angular --tail=100

    # Quick DB sanity check
    - name: Check databases
      shell: powershell
      continue-on-error: true
      run: |
        echo "üëâ Bases pr√©sentes (via docker compose exec) :"
        docker compose -f docker-compose.yml exec -T mysql mysql -uroot -e "SHOW DATABASES;"


  

  # trivy-scan:
  #   name: Trivy Security Scan
  #   runs-on: self-hosted
  #   needs: docker-build-push-run

  #   steps:
  #     - name: Install Trivy
  #       run: |
  #         apt-get update && apt-get install -y wget
  #         wget -qO- https://github.com/aquasecurity/trivy/releases/latest/download/trivy_0.50.1_Linux-64bit.tar.gz | tar zxvf - -C /usr/local/bin

  #     - name: Scan backend image
  #       run: |
  #         trivy image --exit-code 1 --severity HIGH,CRITICAL ahmedzmerli/spring || echo "Backend image has vulnerabilities"

  #     - name: Scan frontend image
  #       run: |
  #         trivy image --exit-code 1 --severity HIGH,CRITICAL ahmedzmerli/angular || echo "Frontend image has vulnerabilities"



      
