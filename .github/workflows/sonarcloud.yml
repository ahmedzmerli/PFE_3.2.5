name: CI/CD Pipeline - Build, Test, SonarQube, Docker, Trivy, Nexus

on:
  push:
    branches: [ main ]
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build-test:
    name: Build and Test
    runs-on: self-hosted

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: 'maven'

      - name: Build and run unit tests
        run: |
          cd GestionUser
          mvn -B clean test

  sonarqube-analysis:
    name: SonarQube Analysis
    runs-on: self-hosted
    needs: build-test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: 'maven'

      - name: SonarQube Scan
        run: |
          cd GestionUser
          mvn -B verify sonar:sonar \
            -Dsonar.projectKey=ahmedzmerli_PFE_3.2.5 \
            -Dsonar.organization=ahmedzmerli \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.token=${{ secrets.SONAR_TOKEN }}

  docker-build-push-run:
    name: Docker Build, Push, Compose Up
    runs-on: self-hosted
    needs: sonarqube-analysis

    env:
      BACKEND_IMAGE: ahmedzmerli/spring
      FRONTEND_IMAGE: ahmedzmerli/angular
      IMAGE_TAG: ${{ github.sha }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build images
      - name: Build backend image
        run: |
          docker build -t $BACKEND_IMAGE:latest -t $BACKEND_IMAGE:$IMAGE_TAG ./GestionUser

      - name: Build frontend image
        run: |
          docker build -t $FRONTEND_IMAGE:latest -t $FRONTEND_IMAGE:$IMAGE_TAG ./GestionUserDIM2

      # Login Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Push images
      - name: Push backend image
        run: |
          docker push $BACKEND_IMAGE:latest
          docker push $BACKEND_IMAGE:$IMAGE_TAG

      - name: Push frontend image
        run: |
          docker push $FRONTEND_IMAGE:latest
          docker push $FRONTEND_IMAGE:$IMAGE_TAG

      # Reset previous stack
      - name: Reset previous stack
        run: |
          docker compose -f docker-compose.yml down -v --remove-orphans || true
          docker system prune -f || true

      # Launch docker-compose
      - name: Run Docker Compose
        run: |
          echo "üöÄ Lancement de docker compose..."
          docker compose -f docker-compose.yml up -d --build
          echo "‚è≥ Attente 60s (MySQL, backend)..."
          sleep 60

      - name: Show running containers
        run: docker compose -f docker-compose.yml ps

      - name: Quick DB sanity check
        continue-on-error: true
        run: |
          echo "üëâ Bases pr√©sentes :"
          docker compose -f docker-compose.yml exec -T mysql mysql -uroot -e "SHOW DATABASES;"

  trivy-scan:
    name: Trivy Security Scan
    runs-on: self-hosted
    needs: docker-build-push-run

    env:
      BACKEND_IMAGE: ahmedzmerli/spring
      FRONTEND_IMAGE: ahmedzmerli/angular

    steps:
      - name: Trivy Scan - Backend
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.BACKEND_IMAGE }}:latest
          format: 'table'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true

      - name: Trivy Scan - Frontend
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.FRONTEND_IMAGE }}:latest
          format: 'table'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true

  nexus-deploy:
    name: Deploy JAR to Nexus
    runs-on: self-hosted
    needs: trivy-scan

    env:
      NEXUS_BASE_URL: http://localhost:8085   # Port host mapp√© sur 8085
      NEXUS_SERVER_ID: nexus                  # doit matcher <id> dans ton pom.xml

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Wait for Nexus
        run: |
          for i in {1..60}; do
            if curl -s -o /dev/null -w "%{http_code}" $NEXUS_BASE_URL/service/rest/v1/status | grep -q "200"; then
              echo "‚úÖ Nexus ready"; break
            fi
            echo "‚åõ Nexus pas encore pr√™t ($i/60)..."
            sleep 5
          done

      - name: Set up JDK 17 for Maven deploy
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: 'maven'
          server-id: ${{ env.NEXUS_SERVER_ID }}
          server-username: ${{ secrets.NEXUS_USERNAME }}
          server-password: ${{ secrets.NEXUS_PASSWORD }}

      - name: Maven deploy to Nexus
        run: |
          cd GestionUser
          mvn -B -DskipTests clean deploy
