name: CI/CD Pipeline - Build, Test, SonarQube, Docker, Nexus

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build-test:
    name: Build and Test
    runs-on: self-hosted

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Build and run unit tests
        shell: cmd
        run: |
          cd GestionUser && mvn clean test
  sonarqube-analysis:
    name: SonarQube Analysis
    runs-on: self-hosted
    needs: build-test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: SonarQube Scan
        shell: cmd
        run: |
          cd GestionUser && mvn verify sonar:sonar -Dsonar.projectKey=ahmedzmerli_PFE_3.2.5 -Dsonar.organization=ahmedzmerli -Dsonar.host.url=https://sonarcloud.io -Dsonar.token=${{ secrets.SONAR_TOKEN }}
  docker-build-push-run:
    name: Docker Build, Push, and Compose Up
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and tag backend image
        run: docker build -t ahmedzmerli/spring ./GestionUser

      - name: Build and tag frontend image
        run: docker build -t ahmedzmerli/angular ./GestionUserDIM2

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push backend image to Docker Hub
        run: docker push ahmedzmerli/spring

      - name: Push frontend image to Docker Hub
        run: docker push ahmedzmerli/angular

      - name: Run Docker Compose
        run: |
          docker-compose -f docker-compose.yml up -d
          sleep 120  # Wait for containers to stabilize
          docker-compose -f docker-compose.yml logs mysql
          docker-compose -f docker-compose.yml logs backend

  nexus-publish:
    name: Nexus Publish (Placeholder)
    runs-on: self-hosted
    needs: docker-build-push-run
    steps:
      - name: Placeholder step for Nexus
        run: echo "Nexus publishing step (to be implemented)"

  deploy:
    name: Deploy (Placeholder)
    runs-on: self-hosted
    needs: nexus-publish
    steps:
      - name: Placeholder step for Deploy
        run: echo "Deployment step (to be implemented)"


      
